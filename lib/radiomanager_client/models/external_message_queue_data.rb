=begin
#RadioManager

#RadioManager

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module RadioManagerClient

  class ExternalMessageQueueData
    # Message **(Required)**
    attr_accessor :message

    # ID of Message **(Required)**
    attr_accessor :message_id

    # Message Date *(Optional)*
    attr_accessor :message_date

    # Sender **(Required)**
    attr_accessor :sender_name

    # ID of Sender *(Optional)*
    attr_accessor :sender_id

    # URL of Avatar *(Optional)*
    attr_accessor :avatar_url

    # Assigned Model Type ID **(Required)**
    attr_accessor :model_type_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'message' => :'message',
        :'message_id' => :'message_id',
        :'message_date' => :'message_date',
        :'sender_name' => :'sender_name',
        :'sender_id' => :'sender_id',
        :'avatar_url' => :'avatar_url',
        :'model_type_id' => :'model_type_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'message' => :'String',
        :'message_id' => :'Integer',
        :'message_date' => :'DateTime',
        :'sender_name' => :'String',
        :'sender_id' => :'Integer',
        :'avatar_url' => :'String',
        :'model_type_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      else
        self.message = ""
      end

      if attributes.has_key?(:'message_id')
        self.message_id = attributes[:'message_id']
      end

      if attributes.has_key?(:'message_date')
        self.message_date = attributes[:'message_date']
      end

      if attributes.has_key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      else
        self.sender_name = ""
      end

      if attributes.has_key?(:'sender_id')
        self.sender_id = attributes[:'sender_id']
      end

      if attributes.has_key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.has_key?(:'model_type_id')
        self.model_type_id = attributes[:'model_type_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@message.nil? && @message.to_s.length > 600
        invalid_properties.push("invalid value for 'message', the character length must be smaller than or equal to 600.")
      end

      if !@message_id.nil? && @message_id < 0
        invalid_properties.push("invalid value for 'message_id', must be greater than or equal to 0.")
      end

      if !@sender_name.nil? && @sender_name.to_s.length > 60
        invalid_properties.push("invalid value for 'sender_name', the character length must be smaller than or equal to 60.")
      end

      if !@sender_id.nil? && @sender_id < 0
        invalid_properties.push("invalid value for 'sender_id', must be greater than or equal to 0.")
      end

      if !@model_type_id.nil? && @model_type_id < 0
        invalid_properties.push("invalid value for 'model_type_id', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@message.nil? && @message.to_s.length > 600
      return false if !@message_id.nil? && @message_id < 0
      return false if !@sender_name.nil? && @sender_name.to_s.length > 60
      return false if !@sender_id.nil? && @sender_id < 0
      return false if !@model_type_id.nil? && @model_type_id < 0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)

      if !message.nil? && message.to_s.length > 600
        fail ArgumentError, "invalid value for 'message', the character length must be smaller than or equal to 600."
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] message_id Value to be assigned
    def message_id=(message_id)

      if !message_id.nil? && message_id < 0
        fail ArgumentError, "invalid value for 'message_id', must be greater than or equal to 0."
      end

      @message_id = message_id
    end

    # Custom attribute writer method with validation
    # @param [Object] sender_name Value to be assigned
    def sender_name=(sender_name)

      if !sender_name.nil? && sender_name.to_s.length > 60
        fail ArgumentError, "invalid value for 'sender_name', the character length must be smaller than or equal to 60."
      end

      @sender_name = sender_name
    end

    # Custom attribute writer method with validation
    # @param [Object] sender_id Value to be assigned
    def sender_id=(sender_id)

      if !sender_id.nil? && sender_id < 0
        fail ArgumentError, "invalid value for 'sender_id', must be greater than or equal to 0."
      end

      @sender_id = sender_id
    end

    # Custom attribute writer method with validation
    # @param [Object] model_type_id Value to be assigned
    def model_type_id=(model_type_id)

      if !model_type_id.nil? && model_type_id < 0
        fail ArgumentError, "invalid value for 'model_type_id', must be greater than or equal to 0."
      end

      @model_type_id = model_type_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          message == o.message &&
          message_id == o.message_id &&
          message_date == o.message_date &&
          sender_name == o.sender_name &&
          sender_id == o.sender_id &&
          avatar_url == o.avatar_url &&
          model_type_id == o.model_type_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [message, message_id, message_date, sender_name, sender_id, avatar_url, model_type_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RadioManagerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
