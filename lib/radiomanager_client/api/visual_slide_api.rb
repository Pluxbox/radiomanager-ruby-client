=begin
#RadioManager

#This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

The version of the OpenAPI document: 2.0
Contact: support@pluxbox.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RadioManagerClient
  class VisualSlideApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Visual Slide Image
    # Get VisualRadio Image as PNG for publication Base64 encoded inside a JSON object
    # @param [Hash] opts the optional parameters
    # @return [VisualResult]
    def get_visual_slide(opts = {})
      data, _status_code, _headers = get_visual_slide_with_http_info(opts)
      data
    end

    # Get Visual Slide Image
    # Get VisualRadio Image as PNG for publication Base64 encoded inside a JSON object
    # @param [Hash] opts the optional parameters
    # @return [Array<(VisualResult, Integer, Hash)>] VisualResult data, response status code and response headers
    def get_visual_slide_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VisualSlideApi.get_visual_slide ...'
      end
      # resource path
      local_var_path = '/visual'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisualResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"VisualSlideApi.get_visual_slide",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VisualSlideApi#get_visual_slide\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
