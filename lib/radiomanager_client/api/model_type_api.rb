=begin
#RadioManager

#This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

The version of the OpenAPI document: 2.0
Contact: support@pluxbox.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RadioManagerClient
  class ModelTypeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get modelType by id
    # Get modelType by id
    # @param id [Integer] ID of ModelType **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [ModelTypeResult]
    def get_model_type_by_id(id, opts = {})
      data, _status_code, _headers = get_model_type_by_id_with_http_info(id, opts)
      data
    end

    # Get modelType by id
    # Get modelType by id
    # @param id [Integer] ID of ModelType **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(ModelTypeResult, Integer, Hash)>] ModelTypeResult data, response status code and response headers
    def get_model_type_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelTypeApi.get_model_type_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelTypeApi.get_model_type_by_id"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !allowable_values.include?(opts[:'order_direction'])
        fail ArgumentError, "invalid value for \"order_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/model_types/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order-direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelTypeResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"ModelTypeApi.get_model_type_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelTypeApi#get_model_type_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all modelTypes.
    # List all modelTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)*
    # @option opts [Integer] :broadcast_id Search on Broadcast ID *(Optional)*
    # @option opts [Integer] :item_id Search on Item ID *(Optional)*
    # @option opts [Integer] :campaign_id Search on Campaign ID *(Optional)*
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)*
    # @option opts [Integer] :contact_id Search on Contact ID *(Optional)*
    # @option opts [String] :model Search Modeltypes for certain Model *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [InlineResponse2009]
    def list_model_types(opts = {})
      data, _status_code, _headers = list_model_types_with_http_info(opts)
      data
    end

    # Get all modelTypes.
    # List all modelTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)*
    # @option opts [Integer] :broadcast_id Search on Broadcast ID *(Optional)*
    # @option opts [Integer] :item_id Search on Item ID *(Optional)*
    # @option opts [Integer] :campaign_id Search on Campaign ID *(Optional)*
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)*
    # @option opts [Integer] :contact_id Search on Contact ID *(Optional)*
    # @option opts [String] :model Search Modeltypes for certain Model *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def list_model_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelTypeApi.list_model_types ...'
      end
      allowable_values = ["broadcast", "program", "item", "campaign", "presenter", "contact", "external"]
      if @api_client.config.client_side_validation && opts[:'model'] && !allowable_values.include?(opts[:'model'])
        fail ArgumentError, "invalid value for \"model\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !allowable_values.include?(opts[:'order_direction'])
        fail ArgumentError, "invalid value for \"order_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/model_types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'program_id'] = opts[:'program_id'] if !opts[:'program_id'].nil?
      query_params[:'broadcast_id'] = opts[:'broadcast_id'] if !opts[:'broadcast_id'].nil?
      query_params[:'item_id'] = opts[:'item_id'] if !opts[:'item_id'].nil?
      query_params[:'campaign_id'] = opts[:'campaign_id'] if !opts[:'campaign_id'].nil?
      query_params[:'presenter_id'] = opts[:'presenter_id'] if !opts[:'presenter_id'].nil?
      query_params[:'contact_id'] = opts[:'contact_id'] if !opts[:'contact_id'].nil?
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?
      query_params[:'order-direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2009'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"ModelTypeApi.list_model_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelTypeApi#list_model_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
