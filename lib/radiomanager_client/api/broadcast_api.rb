=begin
#RadioManager

#This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

The version of the OpenAPI document: 2.0
Contact: support@pluxbox.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RadioManagerClient
  class BroadcastApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create broadcast.
    # Create broadcast.
    # @param broadcast_data_input [BroadcastDataInput] Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def create_broadcast(broadcast_data_input, opts = {})
      data, _status_code, _headers = create_broadcast_with_http_info(broadcast_data_input, opts)
      data
    end

    # Create broadcast.
    # Create broadcast.
    # @param broadcast_data_input [BroadcastDataInput] Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def create_broadcast_with_http_info(broadcast_data_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.create_broadcast ...'
      end
      # verify the required parameter 'broadcast_data_input' is set
      if @api_client.config.client_side_validation && broadcast_data_input.nil?
        fail ArgumentError, "Missing the required parameter 'broadcast_data_input' when calling BroadcastApi.create_broadcast"
      end
      # resource path
      local_var_path = '/broadcasts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(broadcast_data_input)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.create_broadcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#create_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete broadcast by id
    # Delete broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def delete_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = delete_broadcast_by_id_with_http_info(id, opts)
      data
    end

    # Delete broadcast by id
    # Delete broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def delete_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.delete_broadcast_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.delete_broadcast_by_id"
      end
      # resource path
      local_var_path = '/broadcasts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse202'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.delete_broadcast_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#delete_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broadcast by id
    # Get broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [BroadcastResult]
    def get_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = get_broadcast_by_id_with_http_info(id, opts)
      data
    end

    # Get broadcast by id
    # Get broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(BroadcastResult, Integer, Hash)>] BroadcastResult data, response status code and response headers
    def get_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_broadcast_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.get_broadcast_by_id"
      end
      # resource path
      local_var_path = '/broadcasts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BroadcastResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_broadcast_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current Broadcast
    # Get currently playing Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [BroadcastResult]
    def get_current_broadcast(opts = {})
      data, _status_code, _headers = get_current_broadcast_with_http_info(opts)
      data
    end

    # Get current Broadcast
    # Get currently playing Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [Array<(BroadcastResult, Integer, Hash)>] BroadcastResult data, response status code and response headers
    def get_current_broadcast_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_current_broadcast ...'
      end
      # resource path
      local_var_path = '/broadcasts/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withunpublished'] = opts[:'withunpublished'] if !opts[:'withunpublished'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BroadcastResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_current_broadcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_current_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get daily EPG
    # Get a list of broadcasts as Programming guide for 1 day
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [EPGResults]
    def get_daily_epg(opts = {})
      data, _status_code, _headers = get_daily_epg_with_http_info(opts)
      data
    end

    # Get daily EPG
    # Get a list of broadcasts as Programming guide for 1 day
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [Array<(EPGResults, Integer, Hash)>] EPGResults data, response status code and response headers
    def get_daily_epg_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_daily_epg ...'
      end
      # resource path
      local_var_path = '/broadcasts/epg/daily'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'withunpublished'] = opts[:'withunpublished'] if !opts[:'withunpublished'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EPGResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_daily_epg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_daily_epg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get EPG by date
    # Get a list of broadcasts as Programming guide, seperated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [EPGResults]
    def get_epgby_date(opts = {})
      data, _status_code, _headers = get_epgby_date_with_http_info(opts)
      data
    end

    # Get EPG by date
    # Get a list of broadcasts as Programming guide, seperated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [Array<(EPGResults, Integer, Hash)>] EPGResults data, response status code and response headers
    def get_epgby_date_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_epgby_date ...'
      end
      # resource path
      local_var_path = '/broadcasts/epg'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'withunpublished'] = opts[:'withunpublished'] if !opts[:'withunpublished'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EPGResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_epgby_date",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_epgby_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get next Broadcast
    # Get currently upcoming Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [BroadcastResult]
    def get_next_broadcast(opts = {})
      data, _status_code, _headers = get_next_broadcast_with_http_info(opts)
      data
    end

    # Get next Broadcast
    # Get currently upcoming Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [Array<(BroadcastResult, Integer, Hash)>] BroadcastResult data, response status code and response headers
    def get_next_broadcast_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_next_broadcast ...'
      end
      # resource path
      local_var_path = '/broadcasts/next'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withunpublished'] = opts[:'withunpublished'] if !opts[:'withunpublished'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BroadcastResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_next_broadcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_next_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get weekly EPG
    # Get a list of broadcasts as Programming guide for 7 days, seperated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [EPGResults]
    def get_weekly_epg(opts = {})
      data, _status_code, _headers = get_weekly_epg_with_http_info(opts)
      data
    end

    # Get weekly EPG
    # Get a list of broadcasts as Programming guide for 7 days, seperated per day
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date *(Optional)*
    # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
    # @return [Array<(EPGResults, Integer, Hash)>] EPGResults data, response status code and response headers
    def get_weekly_epg_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.get_weekly_epg ...'
      end
      # resource path
      local_var_path = '/broadcasts/epg/weekly'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'withunpublished'] = opts[:'withunpublished'] if !opts[:'withunpublished'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EPGResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.get_weekly_epg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_weekly_epg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all broadcasts.
    # List all broadcasts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :group_id Search on Group ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :planned_in_epg Checks if item is in EPG *(Optional)*
    # @option opts [Time] :start_min Minimum start date *(Optional)*
    # @option opts [Time] :start_max Maximum start date *(Optional)*
    # @option opts [Integer] :page Current page *(Optional)* (default to 1)
    # @option opts [Integer] :limit Results per page *(Optional)*
    # @option opts [String] :order_by Field to order the results *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [InlineResponse2001]
    def list_broadcasts(opts = {})
      data, _status_code, _headers = list_broadcasts_with_http_info(opts)
      data
    end

    # Get all broadcasts.
    # List all broadcasts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :group_id Search on Group ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :planned_in_epg Checks if item is in EPG *(Optional)*
    # @option opts [Time] :start_min Minimum start date *(Optional)*
    # @option opts [Time] :start_max Maximum start date *(Optional)*
    # @option opts [Integer] :page Current page *(Optional)* (default to 1)
    # @option opts [Integer] :limit Results per page *(Optional)*
    # @option opts [String] :order_by Field to order the results *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def list_broadcasts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.list_broadcasts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling BroadcastApi.list_broadcasts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BroadcastApi.list_broadcasts, must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BroadcastApi.list_broadcasts, must be greater than or equal to 1.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !allowable_values.include?(opts[:'order_direction'])
        fail ArgumentError, "invalid value for \"order_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/broadcasts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'program_id'] = opts[:'program_id'] if !opts[:'program_id'].nil?
      query_params[:'block_id'] = opts[:'block_id'] if !opts[:'block_id'].nil?
      query_params[:'model_type_id'] = opts[:'model_type_id'] if !opts[:'model_type_id'].nil?
      query_params[:'tag_id'] = opts[:'tag_id'] if !opts[:'tag_id'].nil?
      query_params[:'presenter_id'] = opts[:'presenter_id'] if !opts[:'presenter_id'].nil?
      query_params[:'genre_id'] = opts[:'genre_id'] if !opts[:'genre_id'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'item_id'] = opts[:'item_id'] if !opts[:'item_id'].nil?
      query_params[:'planned_in_epg'] = opts[:'planned_in_epg'] if !opts[:'planned_in_epg'].nil?
      query_params[:'start-min'] = opts[:'start_min'] if !opts[:'start_min'].nil?
      query_params[:'start-max'] = opts[:'start_max'] if !opts[:'start_max'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order-by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order-direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.list_broadcasts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#list_broadcasts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print broadcast by id with template
    # Download a rundown in printable format as HTML inside the JSON repsonse
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :template_id The print template to be used *(Optional)*
    # @return [InlineResponse2003]
    def print_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = print_broadcast_by_id_with_http_info(id, opts)
      data
    end

    # Print broadcast by id with template
    # Download a rundown in printable format as HTML inside the JSON repsonse
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :template_id The print template to be used *(Optional)*
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def print_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.print_broadcast_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.print_broadcast_by_id"
      end
      # resource path
      local_var_path = '/broadcasts/print/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'template_id'] = opts[:'template_id'] if !opts[:'template_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2003'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.print_broadcast_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#print_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update broadcast by id
    # Update broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [BroadcastDataInput] :broadcast_data_input Data *(Optional)*
    # @return [InlineResponse202]
    def update_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = update_broadcast_by_id_with_http_info(id, opts)
      data
    end

    # Update broadcast by id
    # Update broadcast by id
    # @param id [Integer] ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [BroadcastDataInput] :broadcast_data_input Data *(Optional)*
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def update_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.update_broadcast_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.update_broadcast_by_id"
      end
      # resource path
      local_var_path = '/broadcasts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'broadcast_data_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse202'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"BroadcastApi.update_broadcast_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#update_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
