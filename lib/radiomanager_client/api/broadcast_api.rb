=begin
#RadioManager

#RadioManager

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module RadioManagerClient
  class BroadcastApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create broadcast.
    # Create broadcast.
    # @param data Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [PostSuccess]
    def create_broadcast(data, opts = {})
      data, _status_code, _headers = create_broadcast_with_http_info(data, opts)
      return data
    end

    # Create broadcast.
    # Create broadcast.
    # @param data Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostSuccess, Fixnum, Hash)>] PostSuccess data, response status code and response headers
    def create_broadcast_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.create_broadcast ..."
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling BroadcastApi.create_broadcast"
      end
      # resource path
      local_var_path = "/broadcasts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostSuccess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#create_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete broadcast by id
    # Delete broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def delete_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = delete_broadcast_by_id_with_http_info(id, opts)
      return data
    end

    # Delete broadcast by id
    # Delete broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def delete_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.delete_broadcast_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.delete_broadcast_by_id"
      end
      if @api_client.config.client_side_validation && id < 0
        fail ArgumentError, 'invalid value for "id" when calling BroadcastApi.delete_broadcast_by_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/broadcasts/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#delete_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get broadcast by id
    # Get broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [BroadcastResult]
    def get_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = get_broadcast_by_id_with_http_info(id, opts)
      return data
    end

    # Get broadcast by id
    # Get broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(BroadcastResult, Fixnum, Hash)>] BroadcastResult data, response status code and response headers
    def get_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_broadcast_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.get_broadcast_by_id"
      end
      if @api_client.config.client_side_validation && id < 0
        fail ArgumentError, 'invalid value for "id" when calling BroadcastApi.get_broadcast_by_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/broadcasts/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current Broadcast
    # Get current Broadcast
    # @param [Hash] opts the optional parameters
    # @return [Broadcast]
    def get_current_broadcast(opts = {})
      data, _status_code, _headers = get_current_broadcast_with_http_info(opts)
      return data
    end

    # Get current Broadcast
    # Get current Broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(Broadcast, Fixnum, Hash)>] Broadcast data, response status code and response headers
    def get_current_broadcast_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_current_broadcast ..."
      end
      # resource path
      local_var_path = "/broadcasts/current"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Broadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_current_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get daily EPG
    # Get current Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Date *(Optional)*
    # @return [EPGBroadcast]
    def get_daily_epg(opts = {})
      data, _status_code, _headers = get_daily_epg_with_http_info(opts)
      return data
    end

    # Get daily EPG
    # Get current Broadcast
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Date *(Optional)*
    # @return [Array<(EPGBroadcast, Fixnum, Hash)>] EPGBroadcast data, response status code and response headers
    def get_daily_epg_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_daily_epg ..."
      end
      # resource path
      local_var_path = "/broadcasts/epg/daily"

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EPGBroadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_daily_epg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get EPG by date
    # Get EPG by date
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Date *(Optional)*
    # @return [EPGBroadcast]
    def get_epg_by_date(opts = {})
      data, _status_code, _headers = get_epg_by_date_with_http_info(opts)
      return data
    end

    # Get EPG by date
    # Get EPG by date
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Date *(Optional)*
    # @return [Array<(EPGBroadcast, Fixnum, Hash)>] EPGBroadcast data, response status code and response headers
    def get_epg_by_date_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_epg_by_date ..."
      end
      # resource path
      local_var_path = "/broadcasts/epg"

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EPGBroadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_epg_by_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get next Broadcast
    # Get next Broadcast
    # @param [Hash] opts the optional parameters
    # @return [Broadcast]
    def get_next_broadcast(opts = {})
      data, _status_code, _headers = get_next_broadcast_with_http_info(opts)
      return data
    end

    # Get next Broadcast
    # Get next Broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(Broadcast, Fixnum, Hash)>] Broadcast data, response status code and response headers
    def get_next_broadcast_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_next_broadcast ..."
      end
      # resource path
      local_var_path = "/broadcasts/next"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Broadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_next_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get weekly EPG
    # Get weekly EPG
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date *(Optional)*
    # @return [EPGBroadcast]
    def get_weekly_epg(opts = {})
      data, _status_code, _headers = get_weekly_epg_with_http_info(opts)
      return data
    end

    # Get weekly EPG
    # Get weekly EPG
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date *(Optional)*
    # @return [Array<(EPGBroadcast, Fixnum, Hash)>] EPGBroadcast data, response status code and response headers
    def get_weekly_epg_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.get_weekly_epg ..."
      end
      # resource path
      local_var_path = "/broadcasts/epg/weekly"

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EPGBroadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#get_weekly_epg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all broadcasts.
    # List all broadcasts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page *(Optional)* (default to 1)
    # @option opts [DateTime] :start_min Minimum start date *(Optional)*
    # @option opts [DateTime] :start_max Maximum start date *(Optional)*
    # @option opts [Integer] :model_type_id Search on ModelType ID *(Optional)*
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [BroadcastResults]
    def list_broadcasts(opts = {})
      data, _status_code, _headers = list_broadcasts_with_http_info(opts)
      return data
    end

    # Get all broadcasts.
    # List all broadcasts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page *(Optional)*
    # @option opts [DateTime] :start_min Minimum start date *(Optional)*
    # @option opts [DateTime] :start_max Maximum start date *(Optional)*
    # @option opts [Integer] :model_type_id Search on ModelType ID *(Optional)*
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(BroadcastResults, Fixnum, Hash)>] BroadcastResults data, response status code and response headers
    def list_broadcasts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.list_broadcasts ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling BroadcastApi.list_broadcasts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/broadcasts"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'start-min'] = opts[:'start_min'] if !opts[:'start_min'].nil?
      query_params[:'start-max'] = opts[:'start_max'] if !opts[:'start_max'].nil?
      query_params[:'model_type_id'] = opts[:'model_type_id'] if !opts[:'model_type_id'].nil?
      query_params[:'tag_id'] = opts[:'tag_id'] if !opts[:'tag_id'].nil?
      query_params[:'presenter_id'] = opts[:'presenter_id'] if !opts[:'presenter_id'].nil?
      query_params[:'item_id'] = opts[:'item_id'] if !opts[:'item_id'].nil?
      query_params[:'block_id'] = opts[:'block_id'] if !opts[:'block_id'].nil?
      query_params[:'genre_id'] = opts[:'genre_id'] if !opts[:'genre_id'].nil?
      query_params[:'program_id'] = opts[:'program_id'] if !opts[:'program_id'].nil?
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#list_broadcasts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print Broadcast by id
    # Print Broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @return [EPGBroadcast]
    def print_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = print_broadcast_by_id_with_http_info(id, opts)
      return data
    end

    # Print Broadcast by id
    # Print Broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
    # @return [Array<(EPGBroadcast, Fixnum, Hash)>] EPGBroadcast data, response status code and response headers
    def print_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.print_broadcast_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.print_broadcast_by_id"
      end
      if @api_client.config.client_side_validation && id < 0
        fail ArgumentError, 'invalid value for "id" when calling BroadcastApi.print_broadcast_by_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/broadcasts/print/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'program_id'] = opts[:'program_id'] if !opts[:'program_id'].nil?
      query_params[:'presenter_id'] = opts[:'presenter_id'] if !opts[:'presenter_id'].nil?
      query_params[:'tag_id'] = opts[:'tag_id'] if !opts[:'tag_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EPGBroadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#print_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update broadcast by id
    # Update broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [BroadcastDataInput] :data Data *(Optional)*
    # @return [Success]
    def update_broadcast_by_id(id, opts = {})
      data, _status_code, _headers = update_broadcast_by_id_with_http_info(id, opts)
      return data
    end

    # Update broadcast by id
    # Update broadcast by id
    # @param id ID of Broadcast **(Required)**
    # @param [Hash] opts the optional parameters
    # @option opts [BroadcastDataInput] :data Data *(Optional)*
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def update_broadcast_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BroadcastApi.update_broadcast_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastApi.update_broadcast_by_id"
      end
      if @api_client.config.client_side_validation && id < 0
        fail ArgumentError, 'invalid value for "id" when calling BroadcastApi.update_broadcast_by_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/broadcasts/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['API Key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#update_broadcast_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
