=begin
#RadioManager

#This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

The version of the OpenAPI document: 2.0
Contact: support@pluxbox.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RadioManagerClient
  class PresenterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create presenter.
    # Create presenter.
    # @param presenter_data_input [PresenterDataInput] Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def create_presenter(presenter_data_input, opts = {})
      data, _status_code, _headers = create_presenter_with_http_info(presenter_data_input, opts)
      data
    end

    # Create presenter.
    # Create presenter.
    # @param presenter_data_input [PresenterDataInput] Data **(Required)**
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def create_presenter_with_http_info(presenter_data_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenterApi.create_presenter ...'
      end
      # verify the required parameter 'presenter_data_input' is set
      if @api_client.config.client_side_validation && presenter_data_input.nil?
        fail ArgumentError, "Missing the required parameter 'presenter_data_input' when calling PresenterApi.create_presenter"
      end
      # resource path
      local_var_path = '/presenters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(presenter_data_input)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"PresenterApi.create_presenter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenterApi#create_presenter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete presenter by id
    # Delete presenter by id
    # @param id [Integer] id of presenter
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def delete_presenter_by_id(id, opts = {})
      data, _status_code, _headers = delete_presenter_by_id_with_http_info(id, opts)
      data
    end

    # Delete presenter by id
    # Delete presenter by id
    # @param id [Integer] id of presenter
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def delete_presenter_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenterApi.delete_presenter_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PresenterApi.delete_presenter_by_id"
      end
      # resource path
      local_var_path = '/presenters/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse202'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"PresenterApi.delete_presenter_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenterApi#delete_presenter_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get presenter by id
    # Get presenter by id
    # @param id [Integer] id of Presenter
    # @param [Hash] opts the optional parameters
    # @return [PresenterResult]
    def get_presenter_by_id(id, opts = {})
      data, _status_code, _headers = get_presenter_by_id_with_http_info(id, opts)
      data
    end

    # Get presenter by id
    # Get presenter by id
    # @param id [Integer] id of Presenter
    # @param [Hash] opts the optional parameters
    # @return [Array<(PresenterResult, Integer, Hash)>] PresenterResult data, response status code and response headers
    def get_presenter_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenterApi.get_presenter_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PresenterApi.get_presenter_by_id"
      end
      # resource path
      local_var_path = '/presenters/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PresenterResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"PresenterApi.get_presenter_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenterApi#get_presenter_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all presenters.
    # List all presenters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :model_type_id Search on ModelType ID (Optional)
    # @option opts [Integer] :page Current page *(Optional)* (default to 1)
    # @option opts [Integer] :limit Results per page *(Optional)*
    # @option opts [String] :order_by Field to order the results *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [InlineResponse20010]
    def list_presenters(opts = {})
      data, _status_code, _headers = list_presenters_with_http_info(opts)
      data
    end

    # Get all presenters.
    # List all presenters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60;
    # @option opts [Integer] :model_type_id Search on ModelType ID (Optional)
    # @option opts [Integer] :page Current page *(Optional)* (default to 1)
    # @option opts [Integer] :limit Results per page *(Optional)*
    # @option opts [String] :order_by Field to order the results *(Optional)*
    # @option opts [String] :order_direction Direction of ordering *(Optional)*
    # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def list_presenters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenterApi.list_presenters ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PresenterApi.list_presenters, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PresenterApi.list_presenters, must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PresenterApi.list_presenters, must be greater than or equal to 1.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !allowable_values.include?(opts[:'order_direction'])
        fail ArgumentError, "invalid value for \"order_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/presenters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'program_id'] = opts[:'program_id'] if !opts[:'program_id'].nil?
      query_params[:'broadcast_id'] = opts[:'broadcast_id'] if !opts[:'broadcast_id'].nil?
      query_params[:'model_type_id'] = opts[:'model_type_id'] if !opts[:'model_type_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order-by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order-direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'_external_station_id'] = opts[:'_external_station_id'] if !opts[:'_external_station_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20010'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"PresenterApi.list_presenters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenterApi#list_presenters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update presenter by id
    # Update presenter by id
    # @param id [Integer] id of Presenter
    # @param presenter_data_input [PresenterDataInput] Data *(Optional)*
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def update_presenter_by_id(id, presenter_data_input, opts = {})
      data, _status_code, _headers = update_presenter_by_id_with_http_info(id, presenter_data_input, opts)
      data
    end

    # Update presenter by id
    # Update presenter by id
    # @param id [Integer] id of Presenter
    # @param presenter_data_input [PresenterDataInput] Data *(Optional)*
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def update_presenter_by_id_with_http_info(id, presenter_data_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenterApi.update_presenter_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PresenterApi.update_presenter_by_id"
      end
      # verify the required parameter 'presenter_data_input' is set
      if @api_client.config.client_side_validation && presenter_data_input.nil?
        fail ArgumentError, "Missing the required parameter 'presenter_data_input' when calling PresenterApi.update_presenter_by_id"
      end
      # resource path
      local_var_path = '/presenters/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(presenter_data_input)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse202'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['API-Key']

      new_options = opts.merge(
        :operation => :"PresenterApi.update_presenter_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenterApi#update_presenter_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
