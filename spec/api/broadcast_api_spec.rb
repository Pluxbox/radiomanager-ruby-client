=begin
#RadioManager

#This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

The version of the OpenAPI document: 2.0
Contact: support@pluxbox.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for RadioManagerClient::BroadcastApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BroadcastApi' do
  before do
    # run before each test
    @api_instance = RadioManagerClient::BroadcastApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BroadcastApi' do
    it 'should create an instance of BroadcastApi' do
      expect(@api_instance).to be_instance_of(RadioManagerClient::BroadcastApi)
    end
  end

  # unit tests for create_broadcast
  # Create broadcast.
  # Create broadcast.
  # @param broadcast_data_input Data **(Required)**
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'create_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_broadcast_by_id
  # Delete broadcast by id
  # Delete broadcast by id
  # @param id ID of Broadcast **(Required)**
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse202]
  describe 'delete_broadcast_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_broadcast_by_id
  # Get broadcast by id
  # Get broadcast by id
  # @param id ID of Broadcast **(Required)**
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
  # @return [BroadcastResult]
  describe 'get_broadcast_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_broadcast
  # Get current Broadcast
  # Get currently playing Broadcast
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
  # @return [BroadcastResult]
  describe 'get_current_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_daily_epg
  # Get daily EPG
  # Get a list of broadcasts as Programming guide for 1 day
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :date Date *(Optional)*
  # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
  # @return [EPGResults]
  describe 'get_daily_epg test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_epgby_date
  # Get EPG by date
  # Get a list of broadcasts as Programming guide, seperated per day
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :date Date *(Optional)*
  # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
  # @return [EPGResults]
  describe 'get_epgby_date test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_next_broadcast
  # Get next Broadcast
  # Get currently upcoming Broadcast
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
  # @return [BroadcastResult]
  describe 'get_next_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_weekly_epg
  # Get weekly EPG
  # Get a list of broadcasts as Programming guide for 7 days, seperated per day
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date *(Optional)*
  # @option opts [Boolean] :withunpublished Show Unpublished *(Optional)*
  # @return [EPGResults]
  describe 'get_weekly_epg test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_broadcasts
  # Get all broadcasts.
  # List all broadcasts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :group_id Search on Group ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :planned_in_epg Checks if item is in EPG *(Optional)*
  # @option opts [Time] :start_min Minimum start date *(Optional)*
  # @option opts [Time] :start_max Maximum start date *(Optional)*
  # @option opts [Integer] :page Current page *(Optional)*
  # @option opts [Integer] :limit Results per page *(Optional)*
  # @option opts [String] :order_by Field to order the results *(Optional)*
  # @option opts [String] :order_direction Direction of ordering *(Optional)*
  # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
  # @return [InlineResponse2001]
  describe 'list_broadcasts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for print_broadcast_by_id
  # Print broadcast by id with template
  # Download a rundown in printable format as HTML inside the JSON repsonse
  # @param id ID of Broadcast **(Required)**
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :template_id The print template to be used *(Optional)*
  # @return [InlineResponse2003]
  describe 'print_broadcast_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_broadcast_by_id
  # Update broadcast by id
  # Update broadcast by id
  # @param id ID of Broadcast **(Required)**
  # @param [Hash] opts the optional parameters
  # @option opts [BroadcastDataInput] :broadcast_data_input Data *(Optional)*
  # @return [InlineResponse202]
  describe 'update_broadcast_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
