=begin
#RadioManager

#RadioManager

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for RadioManagerClient::TagApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TagApi' do
  before do
    # run before each test
    @instance = RadioManagerClient::TagApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TagApi' do
    it 'should create an instance of TagApi' do
      expect(@instance).to be_instance_of(RadioManagerClient::TagApi)
    end
  end

  # unit tests for create_tag
  # Create tag.
  # Create tag.
  # @param data Data **(Required)**
  # @param [Hash] opts the optional parameters
  # @return [PostSuccess]
  describe 'create_tag test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tag_by_id
  # Delete tag by id
  # Delete tag by id
  # @param id ID of Tag **(Required)**
  # @param [Hash] opts the optional parameters
  # @return [Success]
  describe 'delete_tag_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tag_by_id
  # Get tags by id
  # Get tags by id
  # @param id ID of Tag **(Required)**
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
  # @return [TagResult]
  describe 'get_tag_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tags
  # Get a list of all the tags currently in your station.
  # Get a list of all the tags currently in your station. This feature supports pagination and will give a maximum results of 50 tags back.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Current page *(Optional)*
  # @option opts [Integer] :program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60;
  # @option opts [Integer] :limit Results per page *(Optional)*
  # @option opts [String] :order_by Field to order the results *(Optional)*
  # @option opts [String] :order_direction Direction of ordering *(Optional)*
  # @option opts [Integer] :_external_station_id Query on a different (content providing) station *(Optional)*
  # @return [TagResults]
  describe 'list_tags test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tag_by_id
  # Update tag by id
  # Update tag by id
  # @param id ID of Tag **(Required)**
  # @param [Hash] opts the optional parameters
  # @option opts [TagDataInput] :data Data *(Optional)*
  # @return [Success]
  describe 'update_tag_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
