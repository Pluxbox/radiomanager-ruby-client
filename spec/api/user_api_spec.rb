=begin
#Pluxbox Radiomanager Client

#Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com

OpenAPI spec version: 2.0
Contact: support@pluxbox.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for RadioManagerClient::UserApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @instance = RadioManagerClient::UserApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instance of UserApi' do
      expect(@instance).to be_instance_of(RadioManagerClient::UserApi)
    end
  end

  # unit tests for delete_user_by_id
  # Remove user from station by Id
  # Remove user from station by Id
  # @param id id of User
  # @param [Hash] opts the optional parameters
  # @return [Success]
  describe 'delete_user_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_id
  # Get user by id
  # Get user by id
  # @param id id of User
  # @param [Hash] opts the optional parameters
  # @return [UserResult]
  describe 'get_user_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invite_user_by_mail
  # Invite user by mail
  # Invite user by mail
  # @param data Data **(Required)**
  # @param [Hash] opts the optional parameters
  # @return [InviteUserSuccess]
  describe 'invite_user_by_mail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_users
  # Get all users.
  # List all users.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Current page *(Optional)*
  # @option opts [Integer] :role_id Search on Role ID *(Optional)*
  # @return [UserResults]
  describe 'list_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
